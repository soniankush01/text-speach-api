plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.wellsfargo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

configurations {
	all*.exclude module: 'spring-boot-starter-logging'
}

dependencies {
	implementation ('org.springframework.boot:spring-boot-starter'){
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.postgresql:postgresql'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.8'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
	implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
	implementation 'org.slf4j:slf4j-simple:1.7.36'

	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core:3.8.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:3.8.0'

	testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.2'

	testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.1'

}

tasks.named('test') {
	useJUnitPlatform()
}
jacoco {
	toolVersion = "0.8.5"
}

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled true
		html.enabled true
	}
	afterEvaluate{
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: ['com/wellsfargo/textspeachapi/model/*',
										'com/wellsfargo/textspeachapi/TextSpeachApiApplication.java'])
		}))
	}
}
jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				minimum = 0.780
			}
			limit {
				counter = 'BRANCH'
				minimum = 0.130
			}
		}
	}
}
build.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
